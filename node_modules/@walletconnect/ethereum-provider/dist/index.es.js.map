{"version":3,"file":"index.es.js","sources":["../src/constants/values.ts","../src/constants/rpc.ts","../src/EthereumProvider.ts","../src/index.ts"],"sourcesContent":["export const PROTOCOL = \"wc\";\nexport const WC_VERSION = 2;\nexport const CONTEXT = \"ethereum_provider\";\nexport const STORAGE_KEY = `${PROTOCOL}@${WC_VERSION}:${CONTEXT}:`;\nexport const RPC_URL = \"https://rpc.walletconnect.com/v1/\";\n","export const REQUIRED_METHODS = [\"eth_sendTransaction\", \"personal_sign\"];\nexport const OPTIONAL_METHODS = [\n  \"eth_accounts\",\n  \"eth_requestAccounts\",\n  \"eth_call\",\n  \"eth_getBalance\",\n  \"eth_sendRawTransaction\",\n  \"eth_sign\",\n  \"eth_signTransaction\",\n  \"eth_signTypedData\",\n  \"eth_signTypedData_v3\",\n  \"eth_signTypedData_v4\",\n  \"wallet_switchEthereumChain\",\n  \"wallet_addEthereumChain\",\n  \"wallet_getPermissions\",\n  \"wallet_requestPermissions\",\n  \"wallet_registerOnboarding\",\n  \"wallet_watchAsset\",\n  \"wallet_scanQRCode\",\n];\nexport const REQUIRED_EVENTS = [\"chainChanged\", \"accountsChanged\"];\nexport const OPTIONAL_EVENTS = [\"message\", \"disconnect\", \"connect\"];\n","import { EventEmitter } from \"events\";\nimport { getAccountsFromNamespaces, getSdkError, isValidArray } from \"@walletconnect/utils\";\nimport {\n  IEthereumProvider as IProvider,\n  IEthereumProviderEvents,\n  ProviderAccounts,\n  RequestArguments,\n} from \"./types\";\nimport { Metadata, Namespace, UniversalProvider } from \"@walletconnect/universal-provider\";\nimport type { Web3Modal } from \"@web3modal/standalone\";\nimport { SessionTypes, SignClientTypes } from \"@walletconnect/types\";\nimport { STORAGE_KEY, REQUIRED_METHODS, REQUIRED_EVENTS, RPC_URL } from \"./constants\";\n\nexport type RpcMethod =\n  | \"personal_sign\"\n  | \"eth_sendTransaction\"\n  | \"eth_accounts\"\n  | \"eth_requestAccounts\"\n  | \"eth_call\"\n  | \"eth_getBalance\"\n  | \"eth_sendRawTransaction\"\n  | \"eth_sign\"\n  | \"eth_signTransaction\"\n  | \"eth_signTypedData\"\n  | \"eth_signTypedData_v3\"\n  | \"eth_signTypedData_v4\"\n  | \"wallet_switchEthereumChain\"\n  | \"wallet_addEthereumChain\"\n  | \"wallet_getPermissions\"\n  | \"wallet_requestPermissions\"\n  | \"wallet_registerOnboarding\"\n  | \"wallet_watchAsset\"\n  | \"wallet_scanQRCode\";\n\nexport type RpcEvent = \"accountsChanged\" | \"chainChanged\" | \"message\" | \"disconnect\" | \"connect\";\n\nexport interface EthereumRpcMap {\n  [chainId: string]: string;\n}\n\nexport interface SessionEvent {\n  event: { name: string; data: any };\n  chainId: string;\n}\n\nexport interface EthereumRpcConfig {\n  chains: string[];\n  optionalChains?: string[];\n  methods: string[];\n  optionalMethods?: string[];\n  /**\n   * @description Events that the wallet MUST support or the connection will be rejected\n   */\n  events: string[];\n  optionalEvents?: string[];\n  rpcMap: EthereumRpcMap;\n  projectId: string;\n  metadata?: Metadata;\n  showQrModal: boolean;\n  qrModalOptions?: Parameters<Web3Modal[\"setTheme\"]>[0];\n}\nexport interface ConnectOps {\n  chains?: number[];\n  optionalChains?: number[];\n  rpcMap?: EthereumRpcMap;\n  pairingTopic?: string;\n}\n\nexport interface IEthereumProvider extends IProvider {\n  connect(opts?: ConnectOps | undefined): Promise<void>;\n}\n\nexport function getRpcUrl(chainId: string, rpc: EthereumRpcConfig): string | undefined {\n  let rpcUrl: string | undefined;\n  if (rpc.rpcMap) {\n    rpcUrl = rpc.rpcMap[getEthereumChainId([chainId])];\n  }\n  return rpcUrl;\n}\n\nexport function getEthereumChainId(chains: string[]): number {\n  return Number(chains[0].split(\":\")[1]);\n}\n\nexport function toHexChainId(chainId: number): string {\n  return `0x${chainId.toString(16)}`;\n}\n\nexport type NamespacesParams = {\n  chains: EthereumRpcConfig[\"chains\"];\n  optionalChains?: EthereumRpcConfig[\"optionalChains\"];\n  methods?: EthereumRpcConfig[\"methods\"];\n  optionalMethods?: EthereumRpcConfig[\"methods\"];\n  events?: EthereumRpcConfig[\"events\"];\n  rpcMap: EthereumRpcConfig[\"rpcMap\"];\n  optionalEvents?: EthereumRpcConfig[\"events\"];\n};\n\nexport function buildNamespaces(params: NamespacesParams): {\n  required: Namespace;\n  optional?: Namespace;\n} {\n  const { chains, optionalChains, methods, optionalMethods, events, optionalEvents, rpcMap } =\n    params;\n  if (!isValidArray(chains)) {\n    throw new Error(\"Invalid chains\");\n  }\n\n  const requiredChains = chains;\n  const requriedMethods = methods || REQUIRED_METHODS;\n  const requiredEvents = events || REQUIRED_EVENTS;\n  const requiredRpcMap = {\n    [getEthereumChainId(requiredChains)]: rpcMap[getEthereumChainId(requiredChains)],\n  };\n\n  const required: Namespace = {\n    chains: requiredChains,\n    methods: requriedMethods,\n    events: requiredEvents,\n    rpcMap: requiredRpcMap,\n  };\n\n  // make a list of events and methods that require additional permissions\n  // so we know if we should to include the required chains in the optional namespace\n  const eventsRequiringPermissions = events?.filter((event) => !REQUIRED_EVENTS.includes(event));\n  const methodsRequiringPermissions = methods?.filter((event) => !REQUIRED_METHODS.includes(event));\n\n  if (\n    !optionalChains &&\n    !optionalEvents &&\n    !optionalMethods &&\n    !eventsRequiringPermissions?.length &&\n    !methodsRequiringPermissions?.length\n  ) {\n    return { required };\n  }\n\n  /*\n   * decides whether or not to include the required chains in the optional namespace\n   * use case: if there is a single chain as required but additonal methods/events as optional\n   */\n  const shouldIncludeRequiredChains =\n    (eventsRequiringPermissions?.length && methodsRequiringPermissions?.length) || !optionalChains;\n\n  const optional: Namespace = {\n    chains: [\n      ...new Set(\n        shouldIncludeRequiredChains ? requiredChains.concat(optionalChains || []) : optionalChains,\n      ),\n    ],\n    methods: [...new Set(requriedMethods.concat(optionalMethods || []))],\n    events: [...new Set(requiredEvents.concat(optionalEvents || []))],\n    rpcMap,\n  };\n\n  return { required, optional };\n}\nexport interface EthereumProviderOptions {\n  projectId: string;\n  /**\n   * @note Chains that your app intents to use and the peer MUST support. If the peer does not support these chains, the connection will be rejected.\n   * @default [1]\n   * @example [1, 3, 4, 5, 42]\n   */\n  chains: number[];\n  /**\n   * @note Optional chains that your app MAY attempt to use and the peer MAY support. If the peer does not support these chains, the connection will still be established.\n   * @default [1]\n   * @example [1, 3, 4, 5, 42]\n   */\n  optionalChains?: number[];\n  /**\n   * @note Methods that your app intents to use and the peer MUST support. If the peer does not support these methods, the connection will be rejected.\n   * @default [\"eth_sendTransaction\", \"personal_sign\"]\n   */\n  methods?: string[];\n  /**\n   * @note Methods that your app MAY attempt to use and the peer MAY support. If the peer does not support these methods, the connection will still be established.\n   */\n  optionalMethods?: string[];\n  events?: string[];\n  optionalEvents?: string[];\n  rpcMap?: EthereumRpcMap;\n  metadata?: Metadata;\n  showQrModal?: boolean;\n  qrModalOptions?: Parameters<Web3Modal[\"setTheme\"]>[0];\n}\n\nexport class EthereumProvider implements IEthereumProvider {\n  public events = new EventEmitter();\n  public namespace = \"eip155\";\n  public accounts: string[] = [];\n  public signer: InstanceType<typeof UniversalProvider>;\n  public chainId = 1;\n  public modal?: Web3Modal;\n\n  private rpc: EthereumRpcConfig;\n  private readonly STORAGE_KEY = STORAGE_KEY;\n\n  constructor() {\n    // assigned during initialize\n    this.signer = {} as InstanceType<typeof UniversalProvider>;\n    this.rpc = {} as EthereumRpcConfig;\n  }\n\n  static async init(opts: EthereumProviderOptions): Promise<EthereumProvider> {\n    const provider = new EthereumProvider();\n    await provider.initialize(opts);\n    return provider;\n  }\n\n  public async request<T = unknown>(args: RequestArguments): Promise<T> {\n    return await this.signer.request(args, this.formatChainId(this.chainId));\n  }\n\n  public sendAsync(\n    args: RequestArguments,\n    callback: (error: Error | null, response: any) => void,\n  ): void {\n    this.signer.sendAsync(args, callback, this.formatChainId(this.chainId));\n  }\n\n  get connected(): boolean {\n    if (!this.signer.client) return false;\n    return this.signer.client.core.relayer.connected;\n  }\n\n  get connecting(): boolean {\n    if (!this.signer.client) return false;\n    return this.signer.client.core.relayer.connecting;\n  }\n\n  public async enable(): Promise<ProviderAccounts> {\n    if (!this.session) await this.connect();\n    const accounts = await this.request({ method: \"eth_requestAccounts\" });\n    return accounts as ProviderAccounts;\n  }\n\n  public async connect(opts?: ConnectOps): Promise<void> {\n    if (!this.signer.client) {\n      throw new Error(\"Provider not initialized. Call init() first\");\n    }\n\n    this.loadConnectOpts(opts);\n    const { required, optional } = buildNamespaces(this.rpc);\n    try {\n      const session = await new Promise<SessionTypes.Struct | undefined>(\n        async (resolve, reject) => {\n          if (this.rpc.showQrModal) {\n            this.modal?.subscribeModal((state) => {\n              // the modal was closed so reject the promise\n              if (!state.open && !this.signer.session) {\n                this.signer.abortPairingAttempt();\n                reject(new Error(\"Connection request reset. Please try again.\"));\n              }\n            });\n          }\n          await this.signer\n            .connect({\n              namespaces: {\n                [this.namespace]: required,\n              },\n              ...(optional && {\n                optionalNamespaces: {\n                  [this.namespace]: optional,\n                },\n              }),\n              pairingTopic: opts?.pairingTopic,\n            })\n            .then((session) => {\n              resolve(session);\n            })\n            .catch((error: Error) => {\n              reject(new Error(error.message));\n            });\n        },\n      );\n\n      if (!session) return;\n      this.setChainIds(this.rpc.chains);\n      const accounts = getAccountsFromNamespaces(session.namespaces, [this.namespace]);\n      this.setAccounts(accounts);\n      this.events.emit(\"connect\", { chainId: toHexChainId(this.chainId) });\n    } catch (error) {\n      this.signer.logger.error(error);\n      throw error;\n    } finally {\n      if (this.modal) this.modal.closeModal();\n    }\n  }\n\n  public async disconnect(): Promise<void> {\n    if (this.session) {\n      await this.signer.disconnect();\n    }\n    this.reset();\n  }\n\n  public on: IEthereumProviderEvents[\"on\"] = (event, listener) => {\n    this.events.on(event, listener);\n    return this;\n  };\n\n  public once: IEthereumProviderEvents[\"once\"] = (event, listener) => {\n    this.events.once(event, listener);\n    return this;\n  };\n\n  public removeListener: IEthereumProviderEvents[\"removeListener\"] = (event, listener) => {\n    this.events.removeListener(event, listener);\n    return this;\n  };\n\n  public off: IEthereumProviderEvents[\"off\"] = (event, listener) => {\n    this.events.off(event, listener);\n    return this;\n  };\n\n  get isWalletConnect() {\n    return true;\n  }\n\n  get session() {\n    return this.signer.session;\n  }\n  // ---------- Private ----------------------------------------------- //\n\n  private registerEventListeners() {\n    this.signer.on(\"session_event\", (payload: SignClientTypes.EventArguments[\"session_event\"]) => {\n      const { params } = payload;\n      const { event } = params;\n      if (event.name === \"accountsChanged\") {\n        this.accounts = this.parseAccounts(event.data);\n        this.events.emit(\"accountsChanged\", this.accounts);\n      } else if (event.name === \"chainChanged\") {\n        this.setChainId(this.formatChainId(event.data));\n      } else {\n        this.events.emit(event.name as any, event.data);\n      }\n      this.events.emit(\"session_event\", payload);\n    });\n\n    this.signer.on(\"chainChanged\", (chainId: string) => {\n      const chain = parseInt(chainId);\n      this.chainId = chain;\n      this.events.emit(\"chainChanged\", toHexChainId(this.chainId));\n      this.persist();\n    });\n\n    this.signer.on(\n      \"session_update\",\n      (payload: SignClientTypes.EventArguments[\"session_update\"]) => {\n        this.events.emit(\"session_update\", payload);\n      },\n    );\n\n    this.signer.on(\n      \"session_delete\",\n      (payload: SignClientTypes.EventArguments[\"session_delete\"]) => {\n        this.reset();\n        this.events.emit(\"session_delete\", payload);\n        this.events.emit(\"disconnect\", {\n          ...getSdkError(\"USER_DISCONNECTED\"),\n          data: payload.topic,\n          name: \"USER_DISCONNECTED\",\n        });\n      },\n    );\n\n    this.signer.on(\"display_uri\", (uri: string) => {\n      if (this.rpc.showQrModal) {\n        // to refresh the QR we have to close the modal and open it again\n        // until proper API is provided by web3modal\n        this.modal?.closeModal();\n        this.modal?.openModal({ uri });\n      }\n      this.events.emit(\"display_uri\", uri);\n    });\n  }\n\n  private setHttpProvider(chainId: number): void {\n    this.request({\n      method: \"wallet_switchEthereumChain\",\n      params: [{ chainId: chainId.toString(16) }],\n    });\n  }\n\n  private isCompatibleChainId(chainId: string): boolean {\n    return typeof chainId === \"string\" ? chainId.startsWith(`${this.namespace}:`) : false;\n  }\n\n  private formatChainId(chainId: number): string {\n    return `${this.namespace}:${chainId}`;\n  }\n\n  private parseChainId(chainId: string): number {\n    return Number(chainId.split(\":\")[1]);\n  }\n\n  private setChainIds(chains: string[]) {\n    const compatible = chains.filter((x) => this.isCompatibleChainId(x));\n    const chainIds = compatible.map((c) => this.parseChainId(c));\n    if (chainIds.length) {\n      this.chainId = chainIds[0];\n      this.events.emit(\"chainChanged\", toHexChainId(this.chainId));\n      this.persist();\n    }\n  }\n\n  private setChainId(chain: string) {\n    if (this.isCompatibleChainId(chain)) {\n      const chainId = this.parseChainId(chain);\n      this.chainId = chainId;\n      this.setHttpProvider(chainId);\n    }\n  }\n\n  private parseAccountId(account: string): { chainId: string; address: string } {\n    const [namespace, reference, address] = account.split(\":\");\n    const chainId = `${namespace}:${reference}`;\n    return { chainId, address };\n  }\n\n  private setAccounts(accounts: string[]) {\n    this.accounts = accounts\n      .filter((x) => this.parseChainId(this.parseAccountId(x).chainId) === this.chainId)\n      .map((x) => this.parseAccountId(x).address);\n    this.events.emit(\"accountsChanged\", this.accounts);\n  }\n\n  private getRpcConfig(opts: EthereumProviderOptions): EthereumRpcConfig {\n    return {\n      chains: opts.chains?.map((chain) => this.formatChainId(chain)) || [`${this.namespace}:1`],\n      optionalChains: opts.optionalChains\n        ? opts.optionalChains.map((chain) => this.formatChainId(chain))\n        : undefined,\n      methods: opts?.methods || REQUIRED_METHODS,\n      events: opts?.events || REQUIRED_EVENTS,\n      optionalMethods: opts?.optionalMethods || [],\n      optionalEvents: opts?.optionalEvents || [],\n      rpcMap:\n        opts?.rpcMap ||\n        this.buildRpcMap(opts.chains.concat(opts.optionalChains || []), opts.projectId),\n      showQrModal: opts?.showQrModal ?? true,\n      projectId: opts.projectId,\n      metadata: opts.metadata,\n    };\n  }\n\n  private buildRpcMap(chains: number[], projectId: string): EthereumRpcMap {\n    const map: EthereumRpcMap = {};\n    chains.forEach((chain) => {\n      map[chain] = this.getRpcUrl(chain, projectId);\n    });\n    return map;\n  }\n\n  private async initialize(opts: EthereumProviderOptions) {\n    this.rpc = this.getRpcConfig(opts);\n    this.chainId = getEthereumChainId(this.rpc.chains);\n    this.signer = await UniversalProvider.init({\n      projectId: this.rpc.projectId,\n      metadata: this.rpc.metadata,\n    });\n    this.registerEventListeners();\n    await this.loadPersistedSession();\n    if (this.rpc.showQrModal) {\n      try {\n        const { Web3Modal } = await import(\"@web3modal/standalone\");\n        this.modal = new Web3Modal({\n          walletConnectVersion: 2,\n          projectId: this.rpc.projectId,\n          standaloneChains: this.rpc.chains,\n          themeMode: this.rpc.qrModalOptions?.themeMode,\n          themeVariables: this.rpc.qrModalOptions?.themeVariables,\n        });\n      } catch {\n        throw new Error(\"To use QR modal, please install @web3modal/standalone package\");\n      }\n    }\n  }\n\n  private loadConnectOpts(opts?: ConnectOps) {\n    if (!opts) return;\n    const { chains, optionalChains, rpcMap } = opts;\n    if (chains && isValidArray(chains)) {\n      this.rpc.chains = chains.map((chain) => this.formatChainId(chain));\n      chains.forEach((chain) => {\n        this.rpc.rpcMap[chain] = rpcMap?.[chain] || this.getRpcUrl(chain);\n      });\n    }\n    if (optionalChains && isValidArray(optionalChains)) {\n      this.rpc.optionalChains = [];\n      this.rpc.optionalChains = optionalChains?.map((chain) => this.formatChainId(chain));\n      optionalChains.forEach((chain) => {\n        this.rpc.rpcMap[chain] = rpcMap?.[chain] || this.getRpcUrl(chain);\n      });\n    }\n  }\n\n  private getRpcUrl(chainId: number, projectId?: string): string {\n    const providedRpc = this.rpc.rpcMap?.[chainId];\n    return (\n      providedRpc ||\n      `${RPC_URL}?chainId=eip155:${chainId}&projectId=${projectId || this.rpc.projectId}`\n    );\n  }\n\n  private async loadPersistedSession() {\n    if (!this.session) return;\n    const chainId = await this.signer.client.core.storage.getItem(`${this.STORAGE_KEY}/chainId`);\n    this.setChainIds(\n      chainId ? [this.formatChainId(chainId)] : this.session.namespaces[this.namespace].accounts,\n    );\n    this.setAccounts(this.session.namespaces[this.namespace].accounts);\n  }\n\n  private reset() {\n    this.chainId = 1;\n    this.accounts = [];\n  }\n\n  private persist() {\n    if (!this.session) return;\n    this.signer.client.core.storage.setItem(`${this.STORAGE_KEY}/chainId`, this.chainId);\n  }\n\n  private parseAccounts(payload: string | string[]): string[] {\n    if (typeof payload === \"string\" || payload instanceof String) {\n      return [this.parseAccount(payload)];\n    }\n    return payload.map((account: string) => this.parseAccount(account));\n  }\n\n  private parseAccount = (payload: any): string => {\n    return this.isCompatibleChainId(payload) ? this.parseAccountId(payload).address : payload;\n  };\n}\n\nexport default EthereumProvider;\n","import { EthereumProvider as Provider } from \"./EthereumProvider\";\nexport const EthereumProvider = Provider;\nexport type { RpcEvent, RpcMethod } from \"./EthereumProvider\";\nexport * from \"./constants/rpc\";\nexport default Provider;\n"],"names":["chains","chainId","params","optionalChains","methods","optionalMethods","events","optionalEvents","rpcMap","isValidArray","requiredChains","requriedMethods","REQUIRED_METHODS","requiredEvents","REQUIRED_EVENTS","requiredRpcMap","required","eventsRequiringPermissions","event","methodsRequiringPermissions","shouldIncludeRequiredChains","optional","EthereumProvider","EventEmitter","STORAGE_KEY","listener","payload","opts","provider","args","callback","session","resolve","reject","_a","state","__spreadProps","__spreadValues","error","accounts","getAccountsFromNamespaces","chain","getSdkError","uri","_b","chainIds","x","c","account","namespace","reference","address","projectId","map","UniversalProvider","Web3Modal","e","RPC_URL","Provider"],"mappings":"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"}